/**
 * copyWithin()
 * 作用:在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。
 * 原数组:改变
 * 语法:Array.prototype.copyWithin(target, start = 0, end = this.length)
 * 参数:
 * target（必需）：从该位置开始替换数据。如果为负值，表示倒数。
 * start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示从末尾开始计算。
 * end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示从末尾开始计算。
 * 这三个参数都应该是数值，如果不是，会自动转为数值。
 */

// 包含start 不包含end
var a = [1, 2, 3, 4, 5, 6, 7, 8, 9].copyWithin(0, 2);// [3, 4, 5, 6, 7, 8, 9, 8, 9]
var b = [1, 2, 3, 4, 5, 6, 7, 8, 9].copyWithin(0, 2, 8);// [3, 4, 5, 6, 7, 8, 7, 8, 9]
// target
var c = [1, 2, 3, 4, 5, 6, 7, 8, 9].copyWithin(1, 2, 8);// [1, 3, 4, 5, 6, 7, 8, 8, 9]
// 负数
var d = [1, 2, 3, 4, 5, 6, 7, 8, 9].copyWithin(1, -2, -1);// [1, 8, 3, 4, 5, 6, 7, 8, 9]
// end位置必须在 start后面,否则没有效果
var e = [1, 2, 3, 4, 5, 6, 7, 8, 9].copyWithin(1, -1, -3);//  [1, 2, 3, 4, 5, 6, 7, 8, 9]
var f = [1, 2, 3, 4, 5, 6, 7, 8, 9].copyWithin(1, 6, 2);//  [1, 2, 3, 4, 5, 6, 7, 8, 9]
var g = [1, 2, 3, 4, 5, 6, 7, 8, 9].copyWithin(1, 6, 6);//  [1, 2, 3, 4, 5, 6, 7, 8, 9]
var h = [1, 2, 3, 4, 5, 6, 7, 8, 9].copyWithin(1, 6, -1);//  [1, 7, 8, 4, 5, 6, 7, 8, 9]
var i = [1, 2, 3, 4, 5, 6, 7, 8, 9].copyWithin(1, -1, 6);// [1, 2, 3, 4, 5, 6, 7, 8, 9]

console.log(a, b, c, d, e, f, g, h, i);

/**
 * 类数组
 */
var a = [].copyWithin.call({ length: 5, 3: 1 }, 0, 3);// {0: 1, 3: 1, length: 5}
console.log(a);

var i32a = new Int32Array([1, 2, 3, 4, 5]);
i32a.copyWithin(0, 2);
console.log(i32a);// [3, 4, 5, 4, 5]